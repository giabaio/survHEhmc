// Generated by rstantools.  Do not edit by hand.

/*
    survHEhmc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    survHEhmc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with survHEhmc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_GenGamma_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 64> locations_array__ =
  {" (found before start of program)",
  " (in 'GenGamma', line 55, column 2 to column 9)",
  " (in 'GenGamma', line 56, column 2 to column 22)",
  " (in 'GenGamma', line 57, column 2 to column 17)",
  " (in 'GenGamma', line 58, column 2 to column 31)",
  " (in 'GenGamma', line 73, column 2 to column 10)",
  " (in 'GenGamma', line 74, column 2 to column 15)",
  " (in 'GenGamma', line 62, column 2 to column 27)",
  " (in 'GenGamma', line 63, column 2 to column 33)",
  " (in 'GenGamma', line 64, column 2 to column 36)",
  " (in 'GenGamma', line 68, column 5 to column 50)",
  " (in 'GenGamma', line 67, column 15 to line 69, column 3)",
  " (in 'GenGamma', line 67, column 2 to line 69, column 3)",
  " (in 'GenGamma', line 70, column 2 to column 36)",
  " (in 'GenGamma', line 40, column 2 to column 21)",
  " (in 'GenGamma', line 41, column 2 to column 22)",
  " (in 'GenGamma', line 42, column 18 to column 23)",
  " (in 'GenGamma', line 42, column 2 to column 27)",
  " (in 'GenGamma', line 43, column 18 to column 24)",
  " (in 'GenGamma', line 43, column 2 to column 28)",
  " (in 'GenGamma', line 44, column 2 to column 17)",
  " (in 'GenGamma', line 45, column 9 to column 14)",
  " (in 'GenGamma', line 45, column 15 to column 16)",
  " (in 'GenGamma', line 45, column 2 to column 24)",
  " (in 'GenGamma', line 46, column 9 to column 15)",
  " (in 'GenGamma', line 46, column 16 to column 17)",
  " (in 'GenGamma', line 46, column 2 to column 26)",
  " (in 'GenGamma', line 47, column 9 to column 10)",
  " (in 'GenGamma', line 47, column 2 to column 20)",
  " (in 'GenGamma', line 48, column 18 to column 19)",
  " (in 'GenGamma', line 48, column 2 to column 32)",
  " (in 'GenGamma', line 49, column 2 to column 12)",
  " (in 'GenGamma', line 50, column 2 to column 24)",
  " (in 'GenGamma', line 51, column 2 to column 24)",
  " (in 'GenGamma', line 52, column 2 to column 24)",
  " (in 'GenGamma', line 57, column 9 to column 10)",
  " (in 'GenGamma', line 58, column 18 to column 24)",
  " (in 'GenGamma', line 9, column 11 to column 26)",
  " (in 'GenGamma', line 9, column 4 to column 33)",
  " (in 'GenGamma', line 10, column 4 to column 15)",
  " (in 'GenGamma', line 11, column 11 to column 26)",
  " (in 'GenGamma', line 11, column 4 to column 30)",
  " (in 'GenGamma', line 13, column 4 to column 28)",
  " (in 'GenGamma', line 15, column 6 to column 120)",
  " (in 'GenGamma', line 14, column 33 to line 16, column 5)",
  " (in 'GenGamma', line 14, column 4 to line 16, column 5)",
  " (in 'GenGamma', line 18, column 4 to column 24)",
  " (in 'GenGamma', line 19, column 4 to column 17)",
  " (in 'GenGamma', line 4, column 63 to line 20, column 3)",
  " (in 'GenGamma', line 24, column 11 to column 26)",
  " (in 'GenGamma', line 24, column 4 to column 33)",
  " (in 'GenGamma', line 25, column 4 to column 15)",
  " (in 'GenGamma', line 26, column 11 to column 26)",
  " (in 'GenGamma', line 26, column 4 to column 30)",
  " (in 'GenGamma', line 27, column 11 to column 26)",
  " (in 'GenGamma', line 27, column 4 to column 31)",
  " (in 'GenGamma', line 29, column 4 to column 16)",
  " (in 'GenGamma', line 30, column 4 to column 29)",
  " (in 'GenGamma', line 32, column 6 to column 130)",
  " (in 'GenGamma', line 31, column 33 to line 33, column 5)",
  " (in 'GenGamma', line 31, column 4 to line 33, column 5)",
  " (in 'GenGamma', line 35, column 4 to column 24)",
  " (in 'GenGamma', line 36, column 4 to column 17)",
  " (in 'GenGamma', line 22, column 78 to line 37, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
  T3__>
gen_gamma_lpdf(const T0__& x_arg__, const T1__& mu_arg__, const T2__& sigma,
               const T3__& Q, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
  T3__, stan::base_type_t<T4__>>
gen_gamma_cens_lpdf(const T0__& x_arg__, const T1__& mu_arg__, const T2__&
                    sigma, const T3__& Q, const T4__& u_arg__, std::ostream*
                    pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
  T3__>
gen_gamma_lpdf(const T0__& x_arg__, const T1__& mu_arg__, const T2__& sigma,
               const T3__& Q, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T2__, T3__>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  const auto& mu = stan::math::to_ref(mu_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 37;
    stan::math::validate_non_negative_index("prob", "num_elements(x)",
      stan::math::num_elements(x));
    Eigen::Matrix<local_scalar_t__,-1,1> prob =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       x), DUMMY_VAR__);
    local_scalar_t__ lprob = DUMMY_VAR__;
    current_statement__ = 40;
    stan::math::validate_non_negative_index("w", "num_elements(x)",
      stan::math::num_elements(x));
    Eigen::Matrix<local_scalar_t__,-1,1> w =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       x), DUMMY_VAR__);
    current_statement__ = 42;
    stan::model::assign(w,
      stan::math::divide(stan::math::subtract(stan::math::log(x), mu), sigma),
      "assigning variable w");
    current_statement__ = 45;
    for (int i = 1; i <= stan::math::num_elements(x); ++i) {
      current_statement__ = 43;
      stan::model::assign(prob,
        ((((-stan::math::log((sigma *
               stan::model::rvalue(x, "x", stan::model::index_uni(i)))) +
        stan::math::log(stan::math::fabs(Q))) + (stan::math::pow(Q, -2) *
        stan::math::log(stan::math::pow(Q, -2)))) + (stan::math::pow(Q, -2) *
        ((Q * stan::model::rvalue(w, "w", stan::model::index_uni(i))) -
        stan::math::exp((Q *
          stan::model::rvalue(w, "w", stan::model::index_uni(i))))))) -
        stan::math::lgamma(stan::math::pow(Q, -2))),
        "assigning variable prob", stan::model::index_uni(i));
    }
    current_statement__ = 46;
    lprob = stan::math::sum(prob);
    current_statement__ = 47;
    return lprob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
  T3__, stan::base_type_t<T4__>>
gen_gamma_cens_lpdf(const T0__& x_arg__, const T1__& mu_arg__, const T2__&
                    sigma, const T3__& Q, const T4__& u_arg__, std::ostream*
                    pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T2__, T3__,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& u = stan::math::to_ref(u_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 49;
    stan::math::validate_non_negative_index("prob", "num_elements(x)",
      stan::math::num_elements(x));
    Eigen::Matrix<local_scalar_t__,-1,1> prob =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       x), DUMMY_VAR__);
    local_scalar_t__ lprob = DUMMY_VAR__;
    current_statement__ = 52;
    stan::math::validate_non_negative_index("w", "num_elements(x)",
      stan::math::num_elements(x));
    Eigen::Matrix<local_scalar_t__,-1,1> w =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       x), DUMMY_VAR__);
    current_statement__ = 54;
    stan::math::validate_non_negative_index("tr", "num_elements(x)",
      stan::math::num_elements(x));
    Eigen::Matrix<local_scalar_t__,-1,1> tr =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       x), DUMMY_VAR__);
    current_statement__ = 56;
    stan::model::assign(tr, stan::math::elt_multiply(x, u),
      "assigning variable tr");
    current_statement__ = 57;
    stan::model::assign(w,
      stan::math::divide(stan::math::subtract(stan::math::log(tr), mu), sigma),
      "assigning variable w");
    current_statement__ = 60;
    for (int i = 1; i <= stan::math::num_elements(x); ++i) {
      current_statement__ = 58;
      stan::model::assign(prob,
        (((((stan::math::log(
               stan::model::rvalue(u, "u", stan::model::index_uni(i))) -
        stan::math::log((sigma *
          stan::model::rvalue(tr, "tr", stan::model::index_uni(i))))) +
        stan::math::log(stan::math::fabs(Q))) + (stan::math::pow(Q, -2) *
        stan::math::log(stan::math::pow(Q, -2)))) + (stan::math::pow(Q, -2) *
        ((Q * stan::model::rvalue(w, "w", stan::model::index_uni(i))) -
        stan::math::exp((Q *
          stan::model::rvalue(w, "w", stan::model::index_uni(i))))))) -
        stan::math::lgamma(stan::math::pow(Q, -2))),
        "assigning variable prob", stan::model::index_uni(i));
    }
    current_statement__ = 61;
    lprob = stan::math::sum(prob);
    current_statement__ = 62;
    return lprob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_GenGamma final : public model_base_crtp<model_GenGamma> {
private:
  int n_obs;
  int n_cens;
  Eigen::Matrix<double,-1,1> t_data__;
  Eigen::Matrix<double,-1,1> d_data__;
  int H;
  Eigen::Matrix<double,-1,-1> X_obs_data__;
  Eigen::Matrix<double,-1,-1> X_cens_data__;
  Eigen::Matrix<double,-1,1> mu_beta_data__;
  Eigen::Matrix<double,-1,1> sigma_beta_data__;
  double mu_Q;
  double sigma_Q;
  double a_sigma;
  double b_sigma;
  Eigen::Map<Eigen::Matrix<double,-1,1>> t{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_obs{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_cens{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mu_beta{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_beta{nullptr, 0};
public:
  ~model_GenGamma() {}
  model_GenGamma(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_GenGamma_namespace::model_GenGamma";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 14;
      context__.validate_dims("data initialization", "n_obs", "int",
        std::vector<size_t>{});
      n_obs = std::numeric_limits<int>::min();
      current_statement__ = 14;
      n_obs = context__.vals_i("n_obs")[(1 - 1)];
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "n_obs", n_obs, 1);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "n_cens", "int",
        std::vector<size_t>{});
      n_cens = std::numeric_limits<int>::min();
      current_statement__ = 15;
      n_cens = context__.vals_i("n_cens")[(1 - 1)];
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "n_cens", n_cens, 0);
      current_statement__ = 16;
      stan::math::validate_non_negative_index("t", "n_obs", n_obs);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "t", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs)});
      t_data__ = Eigen::Matrix<double,-1,1>::Constant(n_obs,
                   std::numeric_limits<double>::quiet_NaN());
      new (&t) Eigen::Map<Eigen::Matrix<double,-1,1>>(t_data__.data(), n_obs);
      {
        std::vector<local_scalar_t__> t_flat__;
        current_statement__ = 17;
        t_flat__ = context__.vals_r("t");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
          current_statement__ = 17;
          stan::model::assign(t, t_flat__[(pos__ - 1)],
            "assigning variable t", stan::model::index_uni(sym1__));
          current_statement__ = 17;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "t", t, 0);
      current_statement__ = 18;
      stan::math::validate_non_negative_index("d", "n_cens", n_cens);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "d", "double",
        std::vector<size_t>{static_cast<size_t>(n_cens)});
      d_data__ = Eigen::Matrix<double,-1,1>::Constant(n_cens,
                   std::numeric_limits<double>::quiet_NaN());
      new (&d) Eigen::Map<Eigen::Matrix<double,-1,1>>(d_data__.data(),
        n_cens);
      {
        std::vector<local_scalar_t__> d_flat__;
        current_statement__ = 19;
        d_flat__ = context__.vals_r("d");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= n_cens; ++sym1__) {
          current_statement__ = 19;
          stan::model::assign(d, d_flat__[(pos__ - 1)],
            "assigning variable d", stan::model::index_uni(sym1__));
          current_statement__ = 19;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "d", d, 0);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "H", "int",
        std::vector<size_t>{});
      H = std::numeric_limits<int>::min();
      current_statement__ = 20;
      H = context__.vals_i("H")[(1 - 1)];
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "H", H, 1);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("X_obs", "n_obs", n_obs);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("X_obs", "H", H);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "X_obs", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs),
          static_cast<size_t>(H)});
      X_obs_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_obs, H,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_obs)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_obs_data__.data(), n_obs,
        H);
      {
        std::vector<local_scalar_t__> X_obs_flat__;
        current_statement__ = 23;
        X_obs_flat__ = context__.vals_r("X_obs");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 23;
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            current_statement__ = 23;
            stan::model::assign(X_obs, X_obs_flat__[(pos__ - 1)],
              "assigning variable X_obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 23;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 24;
      stan::math::validate_non_negative_index("X_cens", "n_cens", n_cens);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("X_cens", "H", H);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "X_cens", "double",
        std::vector<size_t>{static_cast<size_t>(n_cens),
          static_cast<size_t>(H)});
      X_cens_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_cens, H,
                        std::numeric_limits<double>::quiet_NaN());
      new (&X_cens)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_cens_data__.data(), n_cens,
        H);
      {
        std::vector<local_scalar_t__> X_cens_flat__;
        current_statement__ = 26;
        X_cens_flat__ = context__.vals_r("X_cens");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 26;
          for (int sym2__ = 1; sym2__ <= n_cens; ++sym2__) {
            current_statement__ = 26;
            stan::model::assign(X_cens, X_cens_flat__[(pos__ - 1)],
              "assigning variable X_cens", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 26;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 27;
      stan::math::validate_non_negative_index("mu_beta", "H", H);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "mu_beta", "double",
        std::vector<size_t>{static_cast<size_t>(H)});
      mu_beta_data__ = Eigen::Matrix<double,-1,1>::Constant(H,
                         std::numeric_limits<double>::quiet_NaN());
      new (&mu_beta)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mu_beta_data__.data(), H);
      {
        std::vector<local_scalar_t__> mu_beta_flat__;
        current_statement__ = 28;
        mu_beta_flat__ = context__.vals_r("mu_beta");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 28;
          stan::model::assign(mu_beta, mu_beta_flat__[(pos__ - 1)],
            "assigning variable mu_beta", stan::model::index_uni(sym1__));
          current_statement__ = 28;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 29;
      stan::math::validate_non_negative_index("sigma_beta", "H", H);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "sigma_beta", "double",
        std::vector<size_t>{static_cast<size_t>(H)});
      sigma_beta_data__ = Eigen::Matrix<double,-1,1>::Constant(H,
                            std::numeric_limits<double>::quiet_NaN());
      new (&sigma_beta)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_beta_data__.data(), H);
      {
        std::vector<local_scalar_t__> sigma_beta_flat__;
        current_statement__ = 30;
        sigma_beta_flat__ = context__.vals_r("sigma_beta");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 30;
          stan::model::assign(sigma_beta, sigma_beta_flat__[(pos__ - 1)],
            "assigning variable sigma_beta", stan::model::index_uni(sym1__));
          current_statement__ = 30;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "sigma_beta",
        sigma_beta, 0);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "mu_Q", "double",
        std::vector<size_t>{});
      mu_Q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 31;
      mu_Q = context__.vals_r("mu_Q")[(1 - 1)];
      current_statement__ = 32;
      context__.validate_dims("data initialization", "sigma_Q", "double",
        std::vector<size_t>{});
      sigma_Q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 32;
      sigma_Q = context__.vals_r("sigma_Q")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "sigma_Q", sigma_Q, 0);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "a_sigma", "double",
        std::vector<size_t>{});
      a_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 33;
      a_sigma = context__.vals_r("a_sigma")[(1 - 1)];
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "a_sigma", a_sigma, 0);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "b_sigma", "double",
        std::vector<size_t>{});
      b_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 34;
      b_sigma = context__.vals_r("b_sigma")[(1 - 1)];
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "b_sigma", b_sigma, 0);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("beta", "H", H);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("cens", "n_cens", n_cens);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + H + n_cens;
  }
  inline std::string model_name() const final {
    return "model_GenGamma";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_GenGamma_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ Q = DUMMY_VAR__;
      current_statement__ = 1;
      Q = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(H, DUMMY_VAR__);
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(H);
      Eigen::Matrix<local_scalar_t__,-1,1> cens =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_cens, DUMMY_VAR__);
      current_statement__ = 4;
      cens = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(1, lp__,
               n_cens);
      {
        current_statement__ = 7;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(Q, mu_Q, sigma_Q));
        current_statement__ = 8;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(sigma, a_sigma,
                         b_sigma));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, mu_beta,
                         sigma_beta));
        current_statement__ = 12;
        if (stan::math::logical_gt(n_cens, 0)) {
          current_statement__ = 10;
          lp_accum__.add(gen_gamma_cens_lpdf<propto__>(cens,
                           stan::math::multiply(X_cens, beta), sigma, Q, d,
                           pstream__));
        }
        current_statement__ = 13;
        lp_accum__.add(gen_gamma_lpdf<propto__>(t,
                         stan::math::multiply(X_obs, beta), sigma, Q,
                         pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_GenGamma_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double Q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      Q = in__.template read<local_scalar_t__>();
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(H,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(H);
      Eigen::Matrix<double,-1,1> cens =
        Eigen::Matrix<double,-1,1>::Constant(n_cens,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      cens = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(1, lp__,
               n_cens);
      out__.write(Q);
      out__.write(sigma);
      out__.write(beta);
      out__.write(cens);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      mu = stan::model::rvalue(beta, "beta", stan::model::index_uni(1));
      out__.write(mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ Q = DUMMY_VAR__;
      current_statement__ = 1;
      Q = in__.read<local_scalar_t__>();
      out__.write(Q);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(H, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(H),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> cens =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_cens, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(cens,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_cens),
        "assigning variable cens");
      out__.write_free_lb(1, cens);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "Q", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(H)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "cens", "double",
        std::vector<size_t>{static_cast<size_t>(n_cens)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ Q = DUMMY_VAR__;
      current_statement__ = 1;
      Q = context__.vals_r("Q")[(1 - 1)];
      out__.write(Q);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(H, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 3;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> cens =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_cens, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> cens_flat__;
        current_statement__ = 4;
        cens_flat__ = context__.vals_r("cens");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_cens; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(cens, cens_flat__[(pos__ - 1)],
            "assigning variable cens", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(1, cens);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"Q", "sigma", "beta", "cens"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(H)},
                std::vector<size_t>{static_cast<size_t>(n_cens)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>> temp{std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "Q");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_cens; ++sym1__) {
      param_names__.emplace_back(std::string() + "cens" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mu");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "Q");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_cens; ++sym1__) {
      param_names__.emplace_back(std::string() + "cens" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mu");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"Q\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"cens\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_cens) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"Q\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"cens\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_cens) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + H) + n_cens);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + H) + n_cens);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_GenGamma_namespace::model_GenGamma;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_GenGamma_namespace::profiles__;
}
#endif
#endif
