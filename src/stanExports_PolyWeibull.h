// Generated by rstantools.  Do not edit by hand.

/*
    survHEhmc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    survHEhmc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with survHEhmc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_PolyWeibull_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 60> locations_array__ =
  {" (found before start of program)",
  " (in 'PolyWeibull', line 80, column 4 to column 22)",
  " (in 'PolyWeibull', line 81, column 4 to column 30)",
  " (in 'PolyWeibull', line 84, column 4 to column 26)",
  " (in 'PolyWeibull', line 85, column 4 to column 23)",
  " (in 'PolyWeibull', line 87, column 8 to column 40)",
  " (in 'PolyWeibull', line 89, column 12 to column 46)",
  " (in 'PolyWeibull', line 88, column 23 to line 90, column 9)",
  " (in 'PolyWeibull', line 88, column 8 to line 90, column 9)",
  " (in 'PolyWeibull', line 86, column 19 to line 91, column 5)",
  " (in 'PolyWeibull', line 86, column 4 to line 91, column 5)",
  " (in 'PolyWeibull', line 96, column 6 to column 52)",
  " (in 'PolyWeibull', line 95, column 17 to line 97, column 3)",
  " (in 'PolyWeibull', line 95, column 2 to line 97, column 3)",
  " (in 'PolyWeibull', line 98, column 2 to column 36)",
  " (in 'PolyWeibull', line 70, column 4 to column 10)",
  " (in 'PolyWeibull', line 71, column 11 to column 12)",
  " (in 'PolyWeibull', line 71, column 4 to column 16)",
  " (in 'PolyWeibull', line 72, column 11 to column 12)",
  " (in 'PolyWeibull', line 72, column 4 to column 16)",
  " (in 'PolyWeibull', line 73, column 4 to column 19)",
  " (in 'PolyWeibull', line 74, column 4 to column 19)",
  " (in 'PolyWeibull', line 75, column 18 to column 19)",
  " (in 'PolyWeibull', line 75, column 11 to column 12)",
  " (in 'PolyWeibull', line 75, column 13 to column 14)",
  " (in 'PolyWeibull', line 75, column 4 to column 21)",
  " (in 'PolyWeibull', line 76, column 11 to column 12)",
  " (in 'PolyWeibull', line 76, column 13 to column 14)",
  " (in 'PolyWeibull', line 76, column 4 to column 24)",
  " (in 'PolyWeibull', line 77, column 20 to column 21)",
  " (in 'PolyWeibull', line 77, column 22 to column 23)",
  " (in 'PolyWeibull', line 77, column 4 to column 36)",
  " (in 'PolyWeibull', line 80, column 19 to column 20)",
  " (in 'PolyWeibull', line 80, column 11 to column 12)",
  " (in 'PolyWeibull', line 81, column 21 to column 22)",
  " (in 'PolyWeibull', line 84, column 11 to column 12)",
  " (in 'PolyWeibull', line 84, column 13 to column 14)",
  " (in 'PolyWeibull', line 85, column 11 to column 12)",
  " (in 'PolyWeibull', line 85, column 13 to column 14)",
  " (in 'PolyWeibull', line 51, column 13 to column 28)",
  " (in 'PolyWeibull', line 51, column 29 to column 30)",
  " (in 'PolyWeibull', line 51, column 6 to column 34)",
  " (in 'PolyWeibull', line 52, column 13 to column 28)",
  " (in 'PolyWeibull', line 52, column 29 to column 30)",
  " (in 'PolyWeibull', line 52, column 6 to column 38)",
  " (in 'PolyWeibull', line 53, column 12 to column 27)",
  " (in 'PolyWeibull', line 53, column 5 to column 37)",
  " (in 'PolyWeibull', line 54, column 6 to column 16)",
  " (in 'PolyWeibull', line 57, column 14 to column 65)",
  " (in 'PolyWeibull', line 58, column 14 to column 56)",
  " (in 'PolyWeibull', line 56, column 39 to line 59, column 11)",
  " (in 'PolyWeibull', line 56, column 10 to line 59, column 11)",
  " (in 'PolyWeibull', line 55, column 21 to line 60, column 7)",
  " (in 'PolyWeibull', line 55, column 6 to line 60, column 7)",
  " (in 'PolyWeibull', line 62, column 8 to column 59)",
  " (in 'PolyWeibull', line 61, column 35 to line 63, column 7)",
  " (in 'PolyWeibull', line 61, column 6 to line 63, column 7)",
  " (in 'PolyWeibull', line 64, column 6 to column 26)",
  " (in 'PolyWeibull', line 65, column 6 to column 18)",
  " (in 'PolyWeibull', line 50, column 80 to line 66, column 5)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
polyweibull_lpdf(const T0__& t_arg__, const T1__& d_arg__, const T2__&
                 shape_arg__, const T3__& rate_arg__, const int& M,
                 std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
polyweibull_lpdf(const T0__& t_arg__, const T1__& d_arg__, const T2__&
                 shape_arg__, const T3__& rate_arg__, const int& M,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& t = stan::math::to_ref(t_arg__);
  const auto& d = stan::math::to_ref(d_arg__);
  const auto& shape = stan::math::to_ref(shape_arg__);
  const auto& rate = stan::math::to_ref(rate_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 39;
    stan::math::validate_non_negative_index("h", "num_elements(t)",
      stan::math::num_elements(t));
    current_statement__ = 40;
    stan::math::validate_non_negative_index("h", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,-1> h =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::math::num_elements(
                                                        t), M, DUMMY_VAR__);
    current_statement__ = 42;
    stan::math::validate_non_negative_index("log_S", "num_elements(t)",
      stan::math::num_elements(t));
    current_statement__ = 43;
    stan::math::validate_non_negative_index("log_S", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,-1> log_S =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::math::num_elements(
                                                        t), M, DUMMY_VAR__);
    current_statement__ = 45;
    stan::math::validate_non_negative_index("log_lik", "num_elements(t)",
      stan::math::num_elements(t));
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       t), DUMMY_VAR__);
    local_scalar_t__ prob = DUMMY_VAR__;
    current_statement__ = 53;
    for (int j = 1; j <= M; ++j) {
      current_statement__ = 51;
      for (int i = 1; i <= stan::math::num_elements(t); ++i) {
        current_statement__ = 48;
        stan::model::assign(h,
          ((stan::model::rvalue(shape, "shape", stan::model::index_uni(j)) *
          stan::model::rvalue(rate, "rate", stan::model::index_uni(i),
            stan::model::index_uni(j))) *
          stan::math::pow(
            stan::model::rvalue(t, "t", stan::model::index_uni(i)),
            (stan::model::rvalue(shape, "shape", stan::model::index_uni(j)) -
            1))), "assigning variable h", stan::model::index_uni(i),
          stan::model::index_uni(j));
        current_statement__ = 49;
        stan::model::assign(log_S,
          (stan::model::rvalue(rate, "rate", stan::model::index_uni(i),
             stan::model::index_uni(j)) *
          stan::math::pow(
            stan::model::rvalue(t, "t", stan::model::index_uni(i)),
            stan::model::rvalue(shape, "shape", stan::model::index_uni(j)))),
          "assigning variable log_S", stan::model::index_uni(i),
          stan::model::index_uni(j));
      }
    }
    current_statement__ = 56;
    for (int i = 1; i <= stan::math::num_elements(t); ++i) {
      current_statement__ = 54;
      stan::model::assign(log_lik,
        ((stan::model::rvalue(d, "d", stan::model::index_uni(i)) *
        stan::math::log(
          stan::math::sum(
            stan::model::rvalue(h, "h", stan::model::index_uni(i),
              stan::model::index_omni())))) -
        stan::math::sum(
          stan::model::rvalue(log_S, "log_S", stan::model::index_uni(i),
            stan::model::index_omni()))), "assigning variable log_lik",
        stan::model::index_uni(i));
    }
    current_statement__ = 57;
    prob = stan::math::sum(log_lik);
    current_statement__ = 58;
    return prob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_PolyWeibull final : public model_base_crtp<model_PolyWeibull> {
private:
  int n;
  Eigen::Matrix<double,-1,1> t_data__;
  Eigen::Matrix<double,-1,1> d_data__;
  int H;
  int M;
  std::vector<Eigen::Matrix<double,-1,-1>> X;
  Eigen::Matrix<double,-1,-1> mu_beta_data__;
  Eigen::Matrix<double,-1,-1> sigma_beta_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> t{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mu_beta{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> sigma_beta{nullptr, 0, 0};
public:
  ~model_PolyWeibull() {}
  model_PolyWeibull(stan::io::var_context& context__, unsigned int
                    random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_PolyWeibull_namespace::model_PolyWeibull";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 15;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 16;
      stan::math::validate_non_negative_index("t", "n", n);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "t", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      t_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&t) Eigen::Map<Eigen::Matrix<double,-1,1>>(t_data__.data(), n);
      {
        std::vector<local_scalar_t__> t_flat__;
        current_statement__ = 17;
        t_flat__ = context__.vals_r("t");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 17;
          stan::model::assign(t, t_flat__[(pos__ - 1)],
            "assigning variable t", stan::model::index_uni(sym1__));
          current_statement__ = 17;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 18;
      stan::math::validate_non_negative_index("d", "n", n);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "d", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      d_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&d) Eigen::Map<Eigen::Matrix<double,-1,1>>(d_data__.data(), n);
      {
        std::vector<local_scalar_t__> d_flat__;
        current_statement__ = 19;
        d_flat__ = context__.vals_r("d");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 19;
          stan::model::assign(d, d_flat__[(pos__ - 1)],
            "assigning variable d", stan::model::index_uni(sym1__));
          current_statement__ = 19;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 20;
      context__.validate_dims("data initialization", "H", "int",
        std::vector<size_t>{});
      H = std::numeric_limits<int>::min();
      current_statement__ = 20;
      H = context__.vals_i("H")[(1 - 1)];
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "H", H, 2);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 21;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "M", M, 2);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("X", "M", M);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("X", "n", n);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("X", "H", H);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(n),
          static_cast<size_t>(H)});
      X = std::vector<Eigen::Matrix<double,-1,-1>>(M,
            Eigen::Matrix<double,-1,-1>::Constant(n, H,
              std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 25;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 25;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 25;
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              current_statement__ = 25;
              stan::model::assign(X, X_flat__[(pos__ - 1)],
                "assigning variable X", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 25;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 26;
      stan::math::validate_non_negative_index("mu_beta", "H", H);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("mu_beta", "M", M);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "mu_beta", "double",
        std::vector<size_t>{static_cast<size_t>(H), static_cast<size_t>(M)});
      mu_beta_data__ = Eigen::Matrix<double,-1,-1>::Constant(H, M,
                         std::numeric_limits<double>::quiet_NaN());
      new (&mu_beta)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mu_beta_data__.data(), H, M);
      {
        std::vector<local_scalar_t__> mu_beta_flat__;
        current_statement__ = 28;
        mu_beta_flat__ = context__.vals_r("mu_beta");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 28;
          for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
            current_statement__ = 28;
            stan::model::assign(mu_beta, mu_beta_flat__[(pos__ - 1)],
              "assigning variable mu_beta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 28;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 29;
      stan::math::validate_non_negative_index("sigma_beta", "H", H);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("sigma_beta", "M", M);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "sigma_beta", "double",
        std::vector<size_t>{static_cast<size_t>(H), static_cast<size_t>(M)});
      sigma_beta_data__ = Eigen::Matrix<double,-1,-1>::Constant(H, M,
                            std::numeric_limits<double>::quiet_NaN());
      new (&sigma_beta)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(sigma_beta_data__.data(), H,
        M);
      {
        std::vector<local_scalar_t__> sigma_beta_flat__;
        current_statement__ = 31;
        sigma_beta_flat__ = context__.vals_r("sigma_beta");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 31;
          for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
            current_statement__ = 31;
            stan::model::assign(sigma_beta, sigma_beta_flat__[(pos__ - 1)],
              "assigning variable sigma_beta",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 31;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "sigma_beta",
        sigma_beta, 0);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("beta", "M", M);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("beta", "H", H);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("alpha", "M", M);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("loglambda", "n", n);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("loglambda", "M", M);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("lambda", "n", n);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("lambda", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (M * H) + M;
  }
  inline std::string model_name() const final {
    return "model_PolyWeibull";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_PolyWeibull_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> beta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(H, DUMMY_VAR__));
      current_statement__ = 1;
      beta = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M, H);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read_constrain_positive_ordered<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, M);
      Eigen::Matrix<local_scalar_t__,-1,-1> loglambda =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, M, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, M, DUMMY_VAR__);
      current_statement__ = 10;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 5;
        stan::model::assign(loglambda,
          stan::math::multiply(
            stan::model::rvalue(X, "X", stan::model::index_uni(m),
              stan::model::index_omni(), stan::model::index_omni()),
            stan::model::rvalue(beta, "beta", stan::model::index_uni(m),
              stan::model::index_omni())), "assigning variable loglambda",
          stan::model::index_omni(), stan::model::index_uni(m));
        current_statement__ = 8;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 6;
          stan::model::assign(lambda,
            stan::math::exp(
              stan::model::rvalue(loglambda, "loglambda",
                stan::model::index_uni(i), stan::model::index_uni(m))),
            "assigning variable lambda", stan::model::index_uni(i),
            stan::model::index_uni(m));
        }
      }
      {
        current_statement__ = 13;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 11;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(m),
                             stan::model::index_omni()),
                           stan::model::rvalue(mu_beta, "mu_beta",
                             stan::model::index_omni(),
                             stan::model::index_uni(m)),
                           stan::model::rvalue(sigma_beta, "sigma_beta",
                             stan::model::index_omni(),
                             stan::model::index_uni(m))));
        }
        current_statement__ = 14;
        lp_accum__.add(polyweibull_lpdf<propto__>(t, d, alpha, lambda, M,
                         pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_PolyWeibull_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<double,-1,1>> beta =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(H,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      beta = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M, H);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha = in__.template read_constrain_positive_ordered<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, M);
      Eigen::Matrix<double,-1,-1> loglambda =
        Eigen::Matrix<double,-1,-1>::Constant(n, M,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> lambda =
        Eigen::Matrix<double,-1,-1>::Constant(n, M,
          std::numeric_limits<double>::quiet_NaN());
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(beta[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(alpha);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 10;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 5;
        stan::model::assign(loglambda,
          stan::math::multiply(
            stan::model::rvalue(X, "X", stan::model::index_uni(m),
              stan::model::index_omni(), stan::model::index_omni()),
            stan::model::rvalue(beta, "beta", stan::model::index_uni(m),
              stan::model::index_omni())), "assigning variable loglambda",
          stan::model::index_omni(), stan::model::index_uni(m));
        current_statement__ = 8;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 6;
          stan::model::assign(lambda,
            stan::math::exp(
              stan::model::rvalue(loglambda, "loglambda",
                stan::model::index_uni(i), stan::model::index_uni(m))),
            "assigning variable lambda", stan::model::index_uni(i),
            stan::model::index_uni(m));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(loglambda);
        out__.write(lambda);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> beta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(H, DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 1;
          stan::model::assign(beta, in__.read<local_scalar_t__>(),
            "assigning variable beta", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable alpha");
      out__.write_free_positive_ordered(alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(H)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> beta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(H, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(beta, beta_flat__[(pos__ - 1)],
              "assigning variable beta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_positive_ordered(alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "alpha"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"loglambda", "lambda"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(M),
                                                 static_cast<size_t>(H)},
                std::vector<size_t>{static_cast<size_t>(M)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(M)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "loglambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "lambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "loglambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "lambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"loglambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"loglambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((M * H) + M);
    const size_t num_transformed = emit_transformed_parameters * (((n * M) +
      (n * M)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((M * H) + M);
    const size_t num_transformed = emit_transformed_parameters * (((n * M) +
      (n * M)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_PolyWeibull_namespace::model_PolyWeibull;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_PolyWeibull_namespace::profiles__;
}
#endif
#endif
